# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'S:\Misc\Development\scans2reports\src\ui_scans_to_reports.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets
from ui_addons import FileDrop

class UiScansToReports(object):
    def setupUi(self, ScansToReports):
        ScansToReports.setObjectName("ScansToReports")
        ScansToReports.resize(1400, 864)
        ScansToReports.setStyleSheet("background: #ffffff;\n"
"")
        self.main_content = QtWidgets.QWidget(ScansToReports)
        self.main_content.setStyleSheet("")
        self.main_content.setObjectName("main_content")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.main_content)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.grp_selected_scans = QtWidgets.QGroupBox(self.main_content)
        self.grp_selected_scans.setStyleSheet("QGroupBox{\n"
"background-color: #c1dbc7;\n"
"border-radius:15px;\n"
"border:1px solid #000000;\n"
"}")
        self.grp_selected_scans.setObjectName("grp_selected_scans")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.grp_selected_scans)
        self.gridLayout_7.setContentsMargins(0, 0, 12, 0)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.grid_selected_scans = QtWidgets.QGridLayout()
        self.grid_selected_scans.setObjectName("grid_selected_scans")
        self.tbl_selected_scans = QtWidgets.QTableWidget(self.grp_selected_scans)
        self.tbl_selected_scans.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.tbl_selected_scans.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.tbl_selected_scans.setStyleSheet("QTableWidget{\n"
"background:#ffffff;\n"
"border-radius:0px;\n"
"border: 1px solid black;\n"
"margin-left:10px;\n"
"margin-bottom:10px;\n"
"font-size: 8pt;\n"
"}\n"
"QHeaderView::section{\n"
"            border-top:0px solid #D8D8D8;\n"
"            border-left:0px solid #D8D8D8;\n"
"            border-right:1px solid #D8D8D8;\n"
"            border-bottom: 1px solid #D8D8D8;\n"
"            background-color:white;\n"
"            padding:4px;\n"
"        }\n"
"QTableCornerButton::section{\n"
"            border-top:0px solid #D8D8D8;\n"
"            border-left:0px solid #D8D8D8;\n"
"            border-right:1px solid #D8D8D8;\n"
"            border-bottom: 1px solid #D8D8D8;\n"
"            background-color:white;\n"
"        }")
        self.tbl_selected_scans.setAlternatingRowColors(True)
        self.tbl_selected_scans.setObjectName("tbl_selected_scans")
        self.tbl_selected_scans.setColumnCount(0)
        self.tbl_selected_scans.setRowCount(0)
        self.grid_selected_scans.addWidget(self.tbl_selected_scans, 0, 0, 1, 1)
        self.btn_parse_scan_files = QtWidgets.QPushButton(self.grp_selected_scans)
        self.btn_parse_scan_files.setMinimumSize(QtCore.QSize(50, 150))
        self.btn_parse_scan_files.setMaximumSize(QtCore.QSize(50, 150))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.btn_parse_scan_files.setFont(font)
        self.btn_parse_scan_files.setStyleSheet("background-color: rgb(30, 126, 52);\n"
"color: #ffffff;\n"
"border-radius: 15px;\n"
"font-size:14pt;")
        self.btn_parse_scan_files.setObjectName("btn_parse_scan_files")
        self.grid_selected_scans.addWidget(self.btn_parse_scan_files, 0, 1, 1, 1)
        self.gridLayout_7.addLayout(self.grid_selected_scans, 0, 0, 1, 1)
        self.gridLayout_2.addWidget(self.grp_selected_scans, 1, 0, 1, 2)
        self.grp_scan_summary = QtWidgets.QGroupBox(self.main_content)
        self.grp_scan_summary.setStyleSheet("QGroupBox{\n"
"background: #f5d7d9;\n"
"border-radius:15px;\n"
"border:1px solid #000000;\n"
"}")
        self.grp_scan_summary.setObjectName("grp_scan_summary")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.grp_scan_summary)
        self.gridLayout_9.setContentsMargins(0, 0, 12, 0)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.grid_scan_summary = QtWidgets.QGridLayout()
        self.grid_scan_summary.setObjectName("grid_scan_summary")
        self.tbl_scan_summary = QtWidgets.QTableWidget(self.grp_scan_summary)
        self.tbl_scan_summary.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.tbl_scan_summary.setStyleSheet("QTableWidget{\n"
"background: #ffffff;\n"
"border-radius: 0px;\n"
"margin-left:10px;\n"
"margin-bottom:10px;\n"
"border: 1px solid black;\n"
"font-size:8pt;\n"
"}\n"
"QHeaderView::section{\n"
"            border-top:0px solid #D8D8D8;\n"
"            border-left:0px solid #D8D8D8;\n"
"            border-right:1px solid #D8D8D8;\n"
"            border-bottom: 1px solid #D8D8D8;\n"
"            background-color:white;\n"
"            padding:4px;\n"
"        }\n"
"QTableCornerButton::section{\n"
"            border-top:0px solid #D8D8D8;\n"
"            border-left:0px solid #D8D8D8;\n"
"            border-right:1px solid #D8D8D8;\n"
"            border-bottom: 1px solid #D8D8D8;\n"
"            background-color:white;\n"
"        }")
        self.tbl_scan_summary.setAlternatingRowColors(True)
        self.tbl_scan_summary.setObjectName("tbl_scan_summary")
        self.tbl_scan_summary.setColumnCount(0)
        self.tbl_scan_summary.setRowCount(0)
        self.grid_scan_summary.addWidget(self.tbl_scan_summary, 0, 0, 1, 1)
        self.btn_execute = QtWidgets.QPushButton(self.grp_scan_summary)
        self.btn_execute.setMinimumSize(QtCore.QSize(50, 150))
        self.btn_execute.setMaximumSize(QtCore.QSize(50, 150))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.btn_execute.setFont(font)
        self.btn_execute.setStyleSheet("background-color: rgb(200, 35, 51);\n"
"color: #ffffff;\n"
"border-radius: 15px;\n"
"font-size:14pt;")
        self.btn_execute.setObjectName("btn_execute")
        self.grid_scan_summary.addWidget(self.btn_execute, 0, 1, 1, 1)
        self.gridLayout_9.addLayout(self.grid_scan_summary, 0, 0, 1, 1)
        self.gridLayout_2.addWidget(self.grp_scan_summary, 2, 0, 1, 2)
        self.grp_file_drop = QtWidgets.QGroupBox(self.main_content)
        self.grp_file_drop.setAcceptDrops(True)
        self.grp_file_drop.setAutoFillBackground(False)
        self.grp_file_drop.setStyleSheet("QGroupBox{\n"
"background: rgb(226, 240, 251); \n"
"border:1px solid #000000;\n"
"padding-top:10px;\n"
"border-radius:15px;\n"
"}")
        self.grp_file_drop.setObjectName("grp_file_drop")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.grp_file_drop)
        self.verticalLayout.setContentsMargins(4, 4, 4, 4)
        self.verticalLayout.setObjectName("verticalLayout")
        self.grid_file_drop = QtWidgets.QGridLayout()
        self.grid_file_drop.setObjectName("grid_file_drop")
        self.frm_file_drop = QtWidgets.QFrame(self.grp_file_drop)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 240, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 247, 253))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 120, 125))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(151, 160, 167))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 240, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 240, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 247, 253))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 240, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 247, 253))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 120, 125))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(151, 160, 167))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 240, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 240, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 247, 253))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 120, 125))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 240, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 247, 253))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 120, 125))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(151, 160, 167))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 120, 125))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 120, 125))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 240, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 240, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 240, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.frm_file_drop.setPalette(palette)
        self.frm_file_drop.setAcceptDrops(False)
        self.frm_file_drop.setAutoFillBackground(False)
        self.frm_file_drop.setStyleSheet("background: rgb(226, 240, 251); ")
        self.frm_file_drop.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frm_file_drop.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frm_file_drop.setObjectName("frm_file_drop")
        self.gridLayout = QtWidgets.QGridLayout(self.frm_file_drop)
        self.gridLayout.setObjectName("gridLayout")
        self.btn_select_scan_files = QtWidgets.QPushButton(self.frm_file_drop)
        self.btn_select_scan_files.setMinimumSize(QtCore.QSize(50, 150))
        self.btn_select_scan_files.setMaximumSize(QtCore.QSize(50, 150))
        self.btn_select_scan_files.setStyleSheet("background-color: rgb(0, 98, 204);\n"
"color: #ffffff;\n"
"border-radius: 15px;\n"
"font-size:14pt;")
        self.btn_select_scan_files.setObjectName("btn_select_scan_files")
        self.gridLayout.addWidget(self.btn_select_scan_files, 0, 2, 1, 1)
        self.lbl_file_drop = FileDrop(QtWidgets.QLabel(self.frm_file_drop), self)
        self.lbl_file_drop.setMinimumSize(QtCore.QSize(200, 250))
        self.lbl_file_drop.setAcceptDrops(True)
        self.lbl_file_drop.setStyleSheet("QLabel#lbl_file_drop{\n"
"border: 1px dashed #3490dc;\n"
"font-size:12px;\n"
"background: #d2e0fb;\n"
"border-radius:15px;\n"
"}")
        self.lbl_file_drop.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_file_drop.setWordWrap(True)
        self.lbl_file_drop.setObjectName("lbl_file_drop")
        self.gridLayout.addWidget(self.lbl_file_drop, 0, 0, 1, 1)
        self.grid_file_drop.addWidget(self.frm_file_drop, 1, 0, 1, 1)
        self.verticalLayout.addLayout(self.grid_file_drop)
        self.gridLayout_2.addWidget(self.grp_file_drop, 0, 1, 1, 1)
        self.grid_data_points = QtWidgets.QGridLayout()
        self.grid_data_points.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.grid_data_points.setObjectName("grid_data_points")
        self.grp_data_points = QtWidgets.QGroupBox(self.main_content)
        self.grp_data_points.setMinimumSize(QtCore.QSize(300, 0))
        self.grp_data_points.setMaximumSize(QtCore.QSize(350, 16777215))
        self.grp_data_points.setStyleSheet("QGroupBox{\n"
"background: #fbecd8;\n"
"border:1px solid #000000;\n"
"padding-top:10px;\n"
"border-radius: 15px;\n"
"}")
        self.grp_data_points.setObjectName("grp_data_points")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.grp_data_points)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.chk_rar = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_rar.setStyleSheet("background:none;")
        self.chk_rar.setChecked(False)
        self.chk_rar.setObjectName("chk_rar")
        self.gridLayout_3.addWidget(self.chk_rar, 5, 2, 1, 1)
        self.chk_operating_systems = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_operating_systems.setStyleSheet("background:none;")
        self.chk_operating_systems.setChecked(False)
        self.chk_operating_systems.setObjectName("chk_operating_systems")
        self.gridLayout_3.addWidget(self.chk_operating_systems, 11, 0, 1, 1)
        self.chk_cci = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_cci.setStyleSheet("background:none;")
        self.chk_cci.setChecked(False)
        self.chk_cci.setObjectName("chk_cci")
        self.gridLayout_3.addWidget(self.chk_cci, 7, 0, 1, 1)
        self.chk_local_users = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_local_users.setStyleSheet("background:none;")
        self.chk_local_users.setChecked(False)
        self.chk_local_users.setObjectName("chk_local_users")
        self.gridLayout_3.addWidget(self.chk_local_users, 9, 0, 1, 1)
        self.txt_command = QtWidgets.QLineEdit(self.grp_data_points)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.txt_command.sizePolicy().hasHeightForWidth())
        self.txt_command.setSizePolicy(sizePolicy)
        self.txt_command.setMinimumSize(QtCore.QSize(150, 25))
        self.txt_command.setMaximumSize(QtCore.QSize(150, 25))
        self.txt_command.setObjectName("txt_command")
        self.gridLayout_3.addWidget(self.txt_command, 1, 0, 1, 1)
        self.chk_software_windows = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_software_windows.setStyleSheet("background:none;")
        self.chk_software_windows.setChecked(False)
        self.chk_software_windows.setObjectName("chk_software_windows")
        self.gridLayout_3.addWidget(self.chk_software_windows, 9, 2, 1, 1)
        self.chk_poam = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_poam.setStyleSheet("background:none;")
        self.chk_poam.setChecked(False)
        self.chk_poam.setObjectName("chk_poam")
        self.gridLayout_3.addWidget(self.chk_poam, 12, 0, 1, 1)
        self.chk_missing_patches = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_missing_patches.setStyleSheet("background:none;")
        self.chk_missing_patches.setChecked(False)
        self.chk_missing_patches.setObjectName("chk_missing_patches")
        self.gridLayout_3.addWidget(self.chk_missing_patches, 10, 0, 1, 1)
        self.txt_poc = QtWidgets.QLineEdit(self.grp_data_points)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.txt_poc.sizePolicy().hasHeightForWidth())
        self.txt_poc.setSizePolicy(sizePolicy)
        self.txt_poc.setMinimumSize(QtCore.QSize(150, 25))
        self.txt_poc.setMaximumSize(QtCore.QSize(150, 25))
        self.txt_poc.setObjectName("txt_poc")
        self.gridLayout_3.addWidget(self.txt_poc, 1, 2, 1, 1)
        self.chk_hardware = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_hardware.setStyleSheet("background:none;")
        self.chk_hardware.setChecked(False)
        self.chk_hardware.setObjectName("chk_hardware")
        self.gridLayout_3.addWidget(self.chk_hardware, 8, 0, 1, 1)
        self.txt_phone = QtWidgets.QLineEdit(self.grp_data_points)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.txt_phone.sizePolicy().hasHeightForWidth())
        self.txt_phone.setSizePolicy(sizePolicy)
        self.txt_phone.setMinimumSize(QtCore.QSize(150, 25))
        self.txt_phone.setMaximumSize(QtCore.QSize(150, 25))
        self.txt_phone.setObjectName("txt_phone")
        self.gridLayout_3.addWidget(self.txt_phone, 3, 0, 1, 1)
        self.chk_test_plan = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_test_plan.setStyleSheet("background:none;")
        self.chk_test_plan.setChecked(False)
        self.chk_test_plan.setObjectName("chk_test_plan")
        self.gridLayout_3.addWidget(self.chk_test_plan, 11, 2, 1, 1)
        self.txt_email = QtWidgets.QLineEdit(self.grp_data_points)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.txt_email.sizePolicy().hasHeightForWidth())
        self.txt_email.setSizePolicy(sizePolicy)
        self.txt_email.setMinimumSize(QtCore.QSize(150, 25))
        self.txt_email.setMaximumSize(QtCore.QSize(150, 25))
        self.txt_email.setObjectName("txt_email")
        self.gridLayout_3.addWidget(self.txt_email, 3, 2, 1, 1)
        self.chk_acas_unique_vuln = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_acas_unique_vuln.setStyleSheet("background:none;")
        self.chk_acas_unique_vuln.setChecked(False)
        self.chk_acas_unique_vuln.setObjectName("chk_acas_unique_vuln")
        self.gridLayout_3.addWidget(self.chk_acas_unique_vuln, 5, 0, 1, 1)
        self.chk_acas_unique_iavm = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_acas_unique_iavm.setAutoFillBackground(False)
        self.chk_acas_unique_iavm.setStyleSheet("background:none;")
        self.chk_acas_unique_iavm.setChecked(False)
        self.chk_acas_unique_iavm.setObjectName("chk_acas_unique_iavm")
        self.gridLayout_3.addWidget(self.chk_acas_unique_iavm, 4, 0, 1, 1)
        self.chk_ppsm = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_ppsm.setStyleSheet("background:none;")
        self.chk_ppsm.setChecked(False)
        self.chk_ppsm.setObjectName("chk_ppsm")
        self.gridLayout_3.addWidget(self.chk_ppsm, 4, 2, 1, 1)
        self.chk_asset_traceability = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_asset_traceability.setStyleSheet("background:none;")
        self.chk_asset_traceability.setChecked(False)
        self.chk_asset_traceability.setObjectName("chk_asset_traceability")
        self.gridLayout_3.addWidget(self.chk_asset_traceability, 6, 0, 1, 1)
        self.chk_software_linux = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_software_linux.setStyleSheet("background:none;")
        self.chk_software_linux.setChecked(False)
        self.chk_software_linux.setObjectName("chk_software_linux")
        self.gridLayout_3.addWidget(self.chk_software_linux, 8, 2, 1, 1)
        self.chk_scap_ckl_issues = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_scap_ckl_issues.setStyleSheet("background:none;")
        self.chk_scap_ckl_issues.setChecked(False)
        self.chk_scap_ckl_issues.setObjectName("chk_scap_ckl_issues")
        self.gridLayout_3.addWidget(self.chk_scap_ckl_issues, 7, 2, 1, 1)
        self.chk_raw_data = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_raw_data.setStyleSheet("background:none;")
        self.chk_raw_data.setChecked(False)
        self.chk_raw_data.setObjectName("chk_raw_data")
        self.gridLayout_3.addWidget(self.chk_raw_data, 6, 2, 1, 1)
        self.chk_summary = QtWidgets.QCheckBox(self.grp_data_points)
        self.chk_summary.setStyleSheet("background:none;")
        self.chk_summary.setChecked(False)
        self.chk_summary.setObjectName("chk_summary")
        self.gridLayout_3.addWidget(self.chk_summary, 10, 2, 1, 1)
        self.grid_data_points.addWidget(self.grp_data_points, 0, 1, 1, 1)
        self.grpReports = QtWidgets.QGroupBox(self.main_content)
        self.grpReports.setMinimumSize(QtCore.QSize(400, 0))
        self.grpReports.setMaximumSize(QtCore.QSize(400, 16777215))
        self.grpReports.setAutoFillBackground(False)
        self.grpReports.setStyleSheet("QGroupBox{\n"
"background: rgb(209, 236, 241);\n"
"border:1px solid #000000;\n"
"padding-top:10px;\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QCheckBox{\n"
"\n"
"    background: none;\n"
"}")
        self.grpReports.setObjectName("grpReports")
        self.cboProcIntensity = QtWidgets.QComboBox(self.grpReports)
        self.cboProcIntensity.setGeometry(QtCore.QRect(130, 140, 261, 22))
        self.cboProcIntensity.setStyleSheet("")
        self.cboProcIntensity.setObjectName("cboProcIntensity")
        self.cboProcIntensity.addItem("")
        self.cboProcIntensity.addItem("")
        self.cboProcIntensity.addItem("")
        self.lblProcessorIntensity = QtWidgets.QLabel(self.grpReports)
        self.lblProcessorIntensity.setGeometry(QtCore.QRect(10, 140, 121, 21))
        self.lblProcessorIntensity.setStyleSheet("background: none;")
        self.lblProcessorIntensity.setObjectName("lblProcessorIntensity")
        self.chkSkipInfo = QtWidgets.QCheckBox(self.grpReports)
        self.chkSkipInfo.setGeometry(QtCore.QRect(10, 60, 151, 25))
        self.chkSkipInfo.setMinimumSize(QtCore.QSize(0, 25))
        self.chkSkipInfo.setMaximumSize(QtCore.QSize(16777215, 25))
        self.chkSkipInfo.setStyleSheet("background: none;")
        self.chkSkipInfo.setChecked(True)
        self.chkSkipInfo.setObjectName("chkSkipInfo")
        self.chk_lower_risk = QtWidgets.QCheckBox(self.grpReports)
        self.chk_lower_risk.setGeometry(QtCore.QRect(230, 60, 141, 25))
        self.chk_lower_risk.setMinimumSize(QtCore.QSize(0, 25))
        self.chk_lower_risk.setMaximumSize(QtCore.QSize(16777215, 25))
        self.chk_lower_risk.setStyleSheet("background: none;")
        self.chk_lower_risk.setChecked(True)
        self.chk_lower_risk.setObjectName("chk_lower_risk")
        self.chk_prefill_scd = QtWidgets.QCheckBox(self.grpReports)
        self.chk_prefill_scd.setGeometry(QtCore.QRect(10, 80, 200, 25))
        self.chk_prefill_scd.setMinimumSize(QtCore.QSize(0, 25))
        self.chk_prefill_scd.setMaximumSize(QtCore.QSize(16777215, 25))
        self.chk_prefill_scd.setStyleSheet("background: none;")
        self.chk_prefill_scd.setChecked(True)
        self.chk_prefill_scd.setObjectName("chk_prefill_scd")
        self.lblExlcudePlugins = QtWidgets.QLabel(self.grpReports)
        self.lblExlcudePlugins.setGeometry(QtCore.QRect(10, 10, 371, 31))
        self.lblExlcudePlugins.setStyleSheet("background: none;\n"
"")
        self.lblExlcudePlugins.setTextFormat(QtCore.Qt.PlainText)
        self.lblExlcudePlugins.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lblExlcudePlugins.setWordWrap(True)
        self.lblExlcudePlugins.setObjectName("lblExlcudePlugins")
        self.spnExcludeDays = QtWidgets.QSpinBox(self.grpReports)
        self.spnExcludeDays.setGeometry(QtCore.QRect(10, 40, 381, 18))
        self.spnExcludeDays.setMinimumSize(QtCore.QSize(0, 0))
        self.spnExcludeDays.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.spnExcludeDays.setMaximum(9999)
        self.spnExcludeDays.setProperty("value", 30)
        self.spnExcludeDays.setObjectName("spnExcludeDays")
        self.lblTestResultsProcessing = QtWidgets.QLabel(self.grpReports)
        self.lblTestResultsProcessing.setGeometry(QtCore.QRect(10, 110, 121, 21))
        self.lblTestResultsProcessing.setStyleSheet("background: none;")
        self.lblTestResultsProcessing.setObjectName("lblTestResultsProcessing")
        self.cboTestResultFunc = QtWidgets.QComboBox(self.grpReports)
        self.cboTestResultFunc.setGeometry(QtCore.QRect(130, 110, 261, 22))
        self.cboTestResultFunc.setStyleSheet("")
        self.cboTestResultFunc.setObjectName("cboTestResultFunc")
        self.cboTestResultFunc.addItem("")
        self.cboTestResultFunc.addItem("")
        self.cboTestResultFunc.addItem("")
        self.chkIncludeFindingDetails = QtWidgets.QCheckBox(self.grpReports)
        self.chkIncludeFindingDetails.setGeometry(QtCore.QRect(230, 80, 151, 25))
        self.chkIncludeFindingDetails.setMinimumSize(QtCore.QSize(0, 25))
        self.chkIncludeFindingDetails.setMaximumSize(QtCore.QSize(16777215, 25))
        self.chkIncludeFindingDetails.setObjectName("chkIncludeFindingDetails")
        self.lblPredisposingConditions = QtWidgets.QLabel(self.grpReports)
        self.lblPredisposingConditions.setGeometry(QtCore.QRect(10, 170, 121, 21))
        self.lblPredisposingConditions.setStyleSheet("background: none;")
        self.lblPredisposingConditions.setObjectName("lblPredisposingConditions")
        self.txtPredisposingCondition = QtWidgets.QPlainTextEdit(self.grpReports)
        self.txtPredisposingCondition.setGeometry(QtCore.QRect(10, 190, 381, 91))
        self.txtPredisposingCondition.setObjectName("txtPredisposingCondition")
        self.grid_data_points.addWidget(self.grpReports, 0, 2, 1, 1)
        self.gridLayout_2.addLayout(self.grid_data_points, 0, 0, 1, 1)
        ScansToReports.setCentralWidget(self.main_content)
        self.mnu_main = QtWidgets.QMenuBar(ScansToReports)
        self.mnu_main.setGeometry(QtCore.QRect(0, 0, 1400, 21))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.mnu_main.setPalette(palette)
        self.mnu_main.setStyleSheet("QMenu::item:selected {\n"
"    color:#000000;\n"
"    background-color: #cccccc;\n"
"}")
        self.mnu_main.setObjectName("mnu_main")
        self.mnu_file = QtWidgets.QMenu(self.mnu_main)
        self.mnu_file.setObjectName("mnu_file")
        self.mnu_help = QtWidgets.QMenu(self.mnu_main)
        self.mnu_help.setObjectName("mnu_help")
        self.menuScans = QtWidgets.QMenu(self.mnu_main)
        self.menuScans.setObjectName("menuScans")
        self.menuMerge_Nessus = QtWidgets.QMenu(self.menuScans)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.HighlightedText, brush)
        self.menuMerge_Nessus.setPalette(palette)
        self.menuMerge_Nessus.setObjectName("menuMerge_Nessus")
        ScansToReports.setMenuBar(self.mnu_main)
        self.statusbar = QtWidgets.QStatusBar(ScansToReports)
        self.statusbar.setObjectName("statusbar")
        ScansToReports.setStatusBar(self.statusbar)
        self.actionSelect = QtWidgets.QAction(ScansToReports)
        self.actionSelect.setObjectName("actionSelect")
        self.actionParse_Scans = QtWidgets.QAction(ScansToReports)
        self.actionParse_Scans.setObjectName("actionParse_Scans")
        self.actionExecute = QtWidgets.QAction(ScansToReports)
        self.actionExecute.setObjectName("actionExecute")
        self.actionExit = QtWidgets.QAction(ScansToReports)
        self.actionExit.setObjectName("actionExit")
        self.actionRefresh_Scans = QtWidgets.QAction(ScansToReports)
        self.actionRefresh_Scans.setObjectName("actionRefresh_Scans")
        self.actionClear_Scans = QtWidgets.QAction(ScansToReports)
        self.actionClear_Scans.setObjectName("actionClear_Scans")
        self.actionHelp = QtWidgets.QAction(ScansToReports)
        self.actionHelp.setObjectName("actionHelp")
        self.actionAbout = QtWidgets.QAction(ScansToReports)
        self.actionAbout.setObjectName("actionAbout")
        self.actionSplit_Nessus = QtWidgets.QAction(ScansToReports)
        self.actionSplit_Nessus.setObjectName("actionSplit_Nessus")
        self.action5_Hosts = QtWidgets.QAction(ScansToReports)
        self.action5_Hosts.setObjectName("action5_Hosts")
        self.action10_Hosts = QtWidgets.QAction(ScansToReports)
        self.action10_Hosts.setObjectName("action10_Hosts")
        self.action25_Hosts = QtWidgets.QAction(ScansToReports)
        self.action25_Hosts.setObjectName("action25_Hosts")
        self.action50_Hosts = QtWidgets.QAction(ScansToReports)
        self.action50_Hosts.setObjectName("action50_Hosts")
        self.actionAll_Hosts = QtWidgets.QAction(ScansToReports)
        self.actionAll_Hosts.setObjectName("actionAll_Hosts")
        self.action15_Hosts = QtWidgets.QAction(ScansToReports)
        self.action15_Hosts.setObjectName("action15_Hosts")
        self.actionUpdate_CKL = QtWidgets.QAction(ScansToReports)
        self.actionUpdate_CKL.setObjectName("actionUpdate_CKL")
        self.actionOpen_Results = QtWidgets.QAction(ScansToReports)
        self.actionOpen_Results.setObjectName("actionOpen_Results")
        self.mnu_file.addAction(self.actionSelect)
        self.mnu_file.addAction(self.actionParse_Scans)
        self.mnu_file.addAction(self.actionExecute)
        self.mnu_file.addSeparator()
        self.mnu_file.addAction(self.actionExit)
        self.mnu_help.addAction(self.actionHelp)
        self.mnu_help.addSeparator()
        self.mnu_help.addAction(self.actionAbout)
        self.menuMerge_Nessus.addAction(self.action5_Hosts)
        self.menuMerge_Nessus.addAction(self.action10_Hosts)
        self.menuMerge_Nessus.addAction(self.action15_Hosts)
        self.menuMerge_Nessus.addAction(self.action25_Hosts)
        self.menuMerge_Nessus.addAction(self.action50_Hosts)
        self.menuMerge_Nessus.addAction(self.actionAll_Hosts)
        self.menuScans.addAction(self.menuMerge_Nessus.menuAction())
        self.menuScans.addAction(self.actionSplit_Nessus)
        self.menuScans.addSeparator()
        self.menuScans.addAction(self.actionUpdate_CKL)
        self.menuScans.addSeparator()
        self.menuScans.addAction(self.actionOpen_Results)
        self.mnu_main.addAction(self.mnu_file.menuAction())
        self.mnu_main.addAction(self.menuScans.menuAction())
        self.mnu_main.addAction(self.mnu_help.menuAction())

        self.retranslateUi(ScansToReports)
        QtCore.QMetaObject.connectSlotsByName(ScansToReports)
        ScansToReports.setTabOrder(self.txt_command, self.txt_poc)
        ScansToReports.setTabOrder(self.txt_poc, self.txt_phone)
        ScansToReports.setTabOrder(self.txt_phone, self.txt_email)
        ScansToReports.setTabOrder(self.txt_email, self.chk_acas_unique_iavm)
        ScansToReports.setTabOrder(self.chk_acas_unique_iavm, self.chk_acas_unique_vuln)
        ScansToReports.setTabOrder(self.chk_acas_unique_vuln, self.chk_asset_traceability)
        ScansToReports.setTabOrder(self.chk_asset_traceability, self.spnExcludeDays)
        ScansToReports.setTabOrder(self.spnExcludeDays, self.chkSkipInfo)
        ScansToReports.setTabOrder(self.chkSkipInfo, self.chk_lower_risk)
        ScansToReports.setTabOrder(self.chk_lower_risk, self.chk_prefill_scd)
        ScansToReports.setTabOrder(self.chk_prefill_scd, self.cboProcIntensity)
        ScansToReports.setTabOrder(self.cboProcIntensity, self.btn_select_scan_files)
        ScansToReports.setTabOrder(self.btn_select_scan_files, self.btn_parse_scan_files)
        ScansToReports.setTabOrder(self.btn_parse_scan_files, self.btn_execute)

    def retranslateUi(self, ScansToReports):
        _translate = QtCore.QCoreApplication.translate
        ScansToReports.setWindowTitle(_translate("ScansToReports", "Scans To Reports"))
        self.grp_selected_scans.setTitle(_translate("ScansToReports", "Selected Scan Files"))
        self.tbl_selected_scans.setToolTip(_translate("ScansToReports", "This table is a summary of all the selected scan files"))
        self.btn_parse_scan_files.setToolTip(_translate("ScansToReports", "Click this button to parse the selected scan files"))
        self.btn_parse_scan_files.setText(_translate("ScansToReports", "P\n"
"A\n"
"R\n"
"S\n"
"E"))
        self.grp_scan_summary.setTitle(_translate("ScansToReports", "Scan Summary"))
        self.tbl_scan_summary.setToolTip(_translate("ScansToReports", "This is a summary of all the parsed scan data"))
        self.btn_execute.setToolTip(_translate("ScansToReports", "Click this button to generate the reports for the selected scan files."))
        self.btn_execute.setText(_translate("ScansToReports", "R\n"
"E\n"
"P\n"
"O\n"
"R\n"
"T"))
        self.grp_file_drop.setTitle(_translate("ScansToReports", "Scan Drop"))
        self.btn_select_scan_files.setToolTip(_translate("ScansToReports", "Click on this button to select scan files to import"))
        self.btn_select_scan_files.setText(_translate("ScansToReports", "I\n"
"M\n"
"P\n"
"O\n"
"R\n"
"T"))
        self.lbl_file_drop.setToolTip(_translate("ScansToReports", "Drop Scan Files onto the section to automatically parse them"))
        self.lbl_file_drop.setText(_translate("ScansToReports", " Select multiple files with the file dialog or by dragging and dropping scan files into this region "))
        self.grp_data_points.setTitle(_translate("ScansToReports", "Report Options"))
        self.chk_rar.setToolTip(_translate("ScansToReports", "This is a Risk Assessment Report for uploading as an artifact to eMASS"))
        self.chk_rar.setText(_translate("ScansToReports", "RAR"))
        self.chk_operating_systems.setToolTip(_translate("ScansToReports", "This report shows the count of each operating system, based on the ACAS scans parsed by the generator."))
        self.chk_operating_systems.setText(_translate("ScansToReports", "Operating Systems"))
        self.chk_cci.setToolTip(_translate("ScansToReports", "This report shows all CCI items in an easy to search and filter format."))
        self.chk_cci.setText(_translate("ScansToReports", "CCI"))
        self.chk_local_users.setToolTip(_translate("ScansToReports", "This report shows all the local users found for each host."))
        self.chk_local_users.setText(_translate("ScansToReports", "Local Users"))
        self.txt_command.setToolTip(_translate("ScansToReports", "Enter the Name of the Base or Command the package belongs to."))
        self.txt_command.setPlaceholderText(_translate("ScansToReports", "Organization Name"))
        self.chk_software_windows.setToolTip(_translate("ScansToReports", "This is a dump of all the windows software utilized within the package, based off the parsed ACAS Scans."))
        self.chk_software_windows.setText(_translate("ScansToReports", "Software - Windows"))
        self.chk_poam.setToolTip(_translate("ScansToReports", "This is the POAM that can be generated for import into eMASS"))
        self.chk_poam.setText(_translate("ScansToReports", "POAM"))
        self.chk_missing_patches.setToolTip(_translate("ScansToReports", "This report shows all patches that should be installed on specific hosts."))
        self.chk_missing_patches.setText(_translate("ScansToReports", "Missing Patches"))
        self.txt_poc.setToolTip(_translate("ScansToReports", "Enter the Name of the main Point of Contact for the package"))
        self.txt_poc.setPlaceholderText(_translate("ScansToReports", "POC Name"))
        self.chk_hardware.setToolTip(_translate("ScansToReports", "This report shows device information for all hosts scanned."))
        self.chk_hardware.setText(_translate("ScansToReports", "Hardware"))
        self.txt_phone.setToolTip(_translate("ScansToReports", "Enter the Phone Number for the main Point of Contact for the package"))
        self.txt_phone.setPlaceholderText(_translate("ScansToReports", "POC Phone #"))
        self.chk_test_plan.setToolTip(_translate("ScansToReports", "This is a test plan that can be uploaded to eMASS"))
        self.chk_test_plan.setText(_translate("ScansToReports", "Test Plan"))
        self.txt_email.setToolTip(_translate("ScansToReports", "Enter the Email for the main Point of Contact for the package"))
        self.txt_email.setPlaceholderText(_translate("ScansToReports", "POC Email"))
        self.chk_acas_unique_vuln.setToolTip(_translate("ScansToReports", "This report will display all the Unique findings that were founder from all submitted ACAS scans."))
        self.chk_acas_unique_vuln.setText(_translate("ScansToReports", "ACAS Unique Vuln"))
        self.chk_acas_unique_iavm.setToolTip(_translate("ScansToReports", "This report will display all the Unique IAVM findings that were founder from all submitted ACAS scans."))
        self.chk_acas_unique_iavm.setText(_translate("ScansToReports", "ACAS Unique IAVM"))
        self.chk_ppsm.setToolTip(_translate("ScansToReports", "This is a PPSM report based on the ACAS Scans parsed by the generator"))
        self.chk_ppsm.setText(_translate("ScansToReports", "PPSM"))
        self.chk_asset_traceability.setToolTip(_translate("ScansToReports", "This report helps determine what specific scans were executed against each specific host.  Use this report to find out if certain hosts require additional scans."))
        self.chk_asset_traceability.setText(_translate("ScansToReports", "Asset Traceability"))
        self.chk_software_linux.setToolTip(_translate("ScansToReports", "This is a dump of all the \'linux\' or \'unix\' software utilized within the package, based off the parsed ACAS Scans."))
        self.chk_software_linux.setText(_translate("ScansToReports", "Software - Linux"))
        self.chk_scap_ckl_issues.setToolTip(_translate("ScansToReports", "This report shows discrepencies between SCAP scans and CKL Executions"))
        self.chk_scap_ckl_issues.setText(_translate("ScansToReports", "SCAP/CKL Issues"))
        self.chk_raw_data.setToolTip(_translate("ScansToReports", "This is a Raw dump of all the scan information parsed by the generator"))
        self.chk_raw_data.setText(_translate("ScansToReports", "Raw Data"))
        self.chk_summary.setToolTip(_translate("ScansToReports", "This is a summary, complete with scores and finding counts, for all scans executed."))
        self.chk_summary.setText(_translate("ScansToReports", "Summary"))
        self.grpReports.setTitle(_translate("ScansToReports", "Generator Options"))
        self.cboProcIntensity.setItemText(0, _translate("ScansToReports", "Normal Load"))
        self.cboProcIntensity.setItemText(1, _translate("ScansToReports", "Light Load"))
        self.cboProcIntensity.setItemText(2, _translate("ScansToReports", "Make My CPU Bleed"))
        self.lblProcessorIntensity.setText(_translate("ScansToReports", "Processing Inensity"))
        self.chkSkipInfo.setToolTip(_translate("ScansToReports", "Skip low risk/informational findings from the report outputs"))
        self.chkSkipInfo.setText(_translate("ScansToReports", "Skip CAT IV (Informational)"))
        self.chk_lower_risk.setToolTip(_translate("ScansToReports", "Automatically lower the risk one level for all findings.  This assumes a valid mitigation statement will be provided."))
        self.chk_lower_risk.setText(_translate("ScansToReports", "Automatically Lower Risk"))
        self.chk_prefill_scd.setToolTip(_translate("ScansToReports", "Prefill a Scheduled Completion Date (SCD) based on the residual risk level for each finding."))
        self.chk_prefill_scd.setText(_translate("ScansToReports", "Prefill Scheduled Completion Date"))
        self.lblExlcudePlugins.setToolTip(_translate("ScansToReports", "Some commands do not require new ACAS plugins to be included in part of a package, normally plugins that have been released within the last 30 days.  Insert the number of days to \'skip\' here, or enter 0 to include all plugins."))
        self.lblExlcudePlugins.setText(_translate("ScansToReports", "Exclude ACAS Plugins Published Less Than X Days Ago: (enter 0 to disable)"))
        self.lblTestResultsProcessing.setToolTip(_translate("ScansToReports", "Add All Findings \n"
"Process as Normal and add all findings to the POAM/RAR\n"
"\n"
"Marked as Closed\n"
"If the CCI is linked to a control that is inherited or not in the package, mark as  completed\n"
"\n"
"Convert to CM-6.5\n"
"If the CCI is linked to a control that is inherited or not in the package, change control to CM-6"))
        self.lblTestResultsProcessing.setText(_translate("ScansToReports", "Test Result Action"))
        self.cboTestResultFunc.setItemText(0, _translate("ScansToReports", "Add All Findings"))
        self.cboTestResultFunc.setItemText(1, _translate("ScansToReports", "Mark as Closed"))
        self.cboTestResultFunc.setItemText(2, _translate("ScansToReports", "Convert to CM-6.5"))
        self.chkIncludeFindingDetails.setText(_translate("ScansToReports", "Include Finding Details"))
        self.lblPredisposingConditions.setText(_translate("ScansToReports", "Predisposing Conditions"))
        self.txtPredisposingCondition.setPlaceholderText(_translate("ScansToReports", "Enter Default Predisposing Conditions"))
        self.mnu_file.setTitle(_translate("ScansToReports", "&File"))
        self.mnu_help.setTitle(_translate("ScansToReports", "&Help"))
        self.menuScans.setTitle(_translate("ScansToReports", "&Scans"))
        self.menuMerge_Nessus.setTitle(_translate("ScansToReports", "Merge Nessus"))
        self.actionSelect.setText(_translate("ScansToReports", "Select Scans"))
        self.actionParse_Scans.setText(_translate("ScansToReports", "Parse Scans"))
        self.actionExecute.setText(_translate("ScansToReports", "Execute"))
        self.actionExit.setText(_translate("ScansToReports", "Exit"))
        self.actionRefresh_Scans.setText(_translate("ScansToReports", "Refresh Scans"))
        self.actionClear_Scans.setText(_translate("ScansToReports", "Clear Scans"))
        self.actionHelp.setText(_translate("ScansToReports", "Help"))
        self.actionAbout.setText(_translate("ScansToReports", "About"))
        self.actionSplit_Nessus.setText(_translate("ScansToReports", "Split Nessus"))
        self.action5_Hosts.setText(_translate("ScansToReports", "5 Hosts"))
        self.action10_Hosts.setText(_translate("ScansToReports", "10 Hosts"))
        self.action25_Hosts.setText(_translate("ScansToReports", "25 Hosts"))
        self.action50_Hosts.setText(_translate("ScansToReports", "50 Hosts"))
        self.actionAll_Hosts.setText(_translate("ScansToReports", "All Hosts"))
        self.action15_Hosts.setText(_translate("ScansToReports", "15 Hosts"))
        self.actionUpdate_CKL.setText(_translate("ScansToReports", "Update CKL"))
        self.actionOpen_Results.setText(_translate("ScansToReports", "Open Results Folder"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ScansToReports = QtWidgets.QMainWindow()
    ui = Ui_ScansToReports()
    ui.setupUi(ScansToReports)
    ScansToReports.show()
    sys.exit(app.exec_())
